
# Define the CI/CD Workflow for Java code
name: CI-CD Workflow for java code 

# Trigger the workflow on pushes to the specified branch
on:
  push:
      
# Define permissions required for the OIDC connection
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This permission allows reading the content of files in the repository# The jobs to be executed in the workfloww

jobs:
  # CI job
  build:
    runs-on: ubuntu-latest
  
    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  
    # Define the steps to be executed in the job
    steps:
    # Checkout the repository to access source code
    - name: Checkout code
      uses: actions/checkout@v3

    # Run Trivy vulnerability scanner in repo mode
    - name: Run Trivy vulnerability scanner in repo mode
      id: trivyscan
      uses: aquasecurity/trivy-action@master
      with:
         scan-type: 'fs'
         scan-ref: '.'
         trivy-config: trivy.yaml
         format: 'table'
         severity: 'CRITICAL,HIGH,MEDIUM'

    # Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
       distribution: 'temurin'
       java-version: '17'

    # # Run unit tests using maven goal
    # - name: Run unit test
    #   run: mvn test

    - name : mvn install
      run : mvn install

    - name: Snyk security scan
      run: npx snyk test --severity-threshold=high
      env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
    # Generate code-coverage report using jacoco
    - name : Get code-coverage report
      run : mvn jacoco:report
      
    # Upload code-coverage report as an artifact
    - name: Code Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: Code Coverage Reports
        path: target/site/jacoco/index.html   # Code coverage report will be generate at 'target/site/jacoco/index.html'
    
    # # Sonarqube Scan using maven command
    # - name: SonarQube Scan
    #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}  -Dsonar.login=${{ secrets.SONAR_TOKEN }} 

    #  # Check sonarqube quality gate using script to make a GET request to the SonarQube API endpoint and retrieve the status of the quality gate
    # - name: Check SonarQube Quality Gate
    #   run: |
    #     status=$(curl -s "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" -u "${{ secrets.SONAR_TOKEN }}": | jq -r '.projectStatus.status')
    #     if [[ "$status" != "OK" ]]; then
    #        echo "SonarQube quality gate check failed." 
    #     else
    #        echo "SonarQube quality gate check succeeded. Continuing with the workflow..."
    #     fi
     # if exit code 1 is added after (echo "SonarQube quality gate check failed.") workflow will fail which will check for quality gate condition 

    # Once we build the package using maven as build tool the artifact generated is in jar format and store under target directory
    - name: Build project and package jar
      run: mvn package
   
    # Build trust between GitHub and AWS using OIDC connector
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
          role-to-assume: ${{ secrets.AWS_IAM_ARN }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}
    
    # Authenticate AWS with Docker to interact with an Amazon ECR registry
    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
    
    # Build the Docker image using Dockerfile & tag it with commit SHA, & push it to ECR repository
    - name: Build Docker Image
      run: |
          short_sha=$(echo "${{ github.sha }}" | cut -c1-7)
          docker build -t employee:${short_sha} .
          docker tag employee:${short_sha} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${short_sha}
   #docker build -t employee:${{ github.sha }} .
  # docker tag employee:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}
       
   
    # Run Trivy vulnerability scanner on specified Docker image in the ECR repository
    - name: Run Trivy vulnerability scanner
      id: trivy-scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true


    # # Push Docker image to Amazon ECR
    # - name: push docker image
    #   run:  |
    #    short_sha=$(echo "${{ github.sha }}" | cut -c1-7)
    #    docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${short_sha}
    #   #docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}


  
      
      
      
      
      
      
      
      


      






















      
       
       
